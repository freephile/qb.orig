---
# - include: setup-RedHat.yml
#   when: ansible_os_family == 'RedHat'

# - include: setup-Debian.yml
#   when: ansible_os_family == 'Debian'

# Fix for RHEL upgrade from 7.3 --> 7.4 adding package http-parser to base
# repository, which caused it to be removed from the EPEL repository. When
# CentOS 7.4 comes out it will have http-parser in its base repo. To maintain
# functionality for all machines running RHEL/CentOS 7.0-7.3 we need to
# manually install http-parser.
#
# Refs:
#   https://bugs.centos.org/view.php?id=13669&nbn=8
#   https://bugzilla.redhat.com/show_bug.cgi?id=1481008
#   https://bugzilla.redhat.com/show_bug.cgi?id=1481470
- name: Get OS minor version (EL-only)
  shell: cat /etc/redhat-release | grep -Eo '[0-9]+' | sed -n 2p
  register: rhel_os_minor_version
  when: ansible_os_family == 'RedHat'
- debug:
    var: rhel_os_minor_version
- name: Ensure http-parser installed from RPM for {{ ansible_distribution_version }}
  yum:
    name: https://kojipkgs.fedoraproject.org//packages/http-parser/2.7.1/3.el7/x86_64/http-parser-2.7.1-3.el7.x86_64.rpm
    state: present
  when:
    - ansible_os_family == 'RedHat'
    - rhel_os_minor_version.stdout | int <= 3

# - name: Ensure Node.js and npm are installed.
#   yum:
#     name:
#       - nodejs
#       - npm
#     state: present
#     enablerepo: epel

- name: Ensure Node.js and npm from yum are REMOVED
  yum:
    name:
      - nodejs
      - npm
    state: absent
  when: ansible_os_family == 'RedHat'



# ref: https://github.com/nodejs/help/wiki/Installation

- name: What version of node, if any, is installed
  shell: node --version
  register: node_version
  failed_when: False

- debug: { var: node_version }

- name: Get Node.JS 8.11.1 tar.gz
  get_url:
    url: https://nodejs.org/dist/v8.11.1/node-v8.11.1-linux-x64.tar.xz
    dest: /tmp/node.tar.xz
    #checksum: sha256: TBD
  when: "node_version.stdout != 'v8.11.1'"

- name: Ensure existing node is removed
  file:
    state: absent
    path: /usr/local/lib/node
  when: "node_version.stdout != 'v8.11.1'"

- name: Ensure directory exists for node
  file:
    state: directory
    path: /usr/local/lib/node
  when: "node_version.stdout != 'v8.11.1'"

- name: Extract foo.tgz into /var/lib/foo
  unarchive:
    src: /tmp/node.tar.xz
    dest: /usr/local/lib/node
    extra_opts: [--strip-components=1]
  when: "node_version.stdout != 'v8.11.1'"

- name: "Ensure symlink in place for node and npm"
  file:
    # dest = symlink, src = dir linked to
    src: "/usr/local/lib/node/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
    owner: root
    group: root
    mode: 0755
  with_items:
    - node
    - npm
  when: "node_version.stdout !=  'v8.11.1'"



- name: Define nodejs_install_npm_user
  set_fact:
    nodejs_install_npm_user: nodeuser
  when: nodejs_install_npm_user is not defined

- name: "Add node.js/npm user group: {{ nodejs_install_npm_user }}"
  group:
    name: "{{ nodejs_install_npm_user }}"
    state: present

# append group if user already exists
- name: "Add node.js/npm user: {{ nodejs_install_npm_user }}"
  user:
    name: "{{ nodejs_install_npm_user }}"
    group: "{{ nodejs_install_npm_user }}"
    createhome: no
    append: yes

- name: Create npm global directory
  file:
    path: "{{ npm_config_prefix }}"
    owner: "{{ nodejs_install_npm_user }}"
    group: "{{ nodejs_install_npm_user }}"
    state: directory

- name: Add npm_config_prefix bin directory to global $PATH.
  template:
    src: npm.sh.j2
    dest: /etc/profile.d/npm.sh
    mode: 0644

# TODO: Remove this task after Ansible 2.x npm module bug is fixed. See:
# https://github.com/ansible/ansible-modules-extras/issues/1375
- name: Ensure npm global packages are installed.
  npm:
    name: "{{ item.name }}"
    version: "{{ item.version | default('latest') }}"
    global: yes
    state: present
  environment:
    NPM_CONFIG_PREFIX: "{{ npm_config_prefix }}"
    NODE_PATH: "{{ npm_config_prefix }}/lib/node_modules"
    NPM_CONFIG_UNSAFE_PERM: "{{ npm_config_unsafe_perm }}"
  with_items: "{{ nodejs_npm_global_packages }}"

- name: Ensure npm global packages are at the latest release.
  npm:
    name: "{{ item.name }}"
    version: "{{ item.version | default('latest') }}"
    global: yes
    state: latest
  environment:
    NPM_CONFIG_PREFIX: "{{ npm_config_prefix }}"
    NODE_PATH: "{{ npm_config_prefix }}/lib/node_modules"
    NPM_CONFIG_UNSAFE_PERM: "{{ npm_config_unsafe_perm }}"
  with_items: "{{ nodejs_npm_global_packages }}"
  tags:
  - latest
